package com.tasks.AlishevJavaCollectionsCourses;

import java.util.Arrays;

public class StringBuilderBuffer {
// Чтобы справиться с созданием временного мусора из-за модификаций объекта String, можно использовать класс StringBuffer.
// Это mutable класс, т.е. изменяемый. Объект класса StringBuffer может содержать в себе определенный набор символов,
// длину и значение которого можно изменить через вызов определенных методов.
// Преимущества:
// Как уже сказано, StringBuffer — изменяемый класс, поэтому при работе с ним не возникает такого же количества
// мусора в памяти, как со String. Поэтому если над строками проводится много модификаций, лучше использовать StringBuffer.
// StringBuffer — потокобезопасный класс. Его методы синхронизированы,
// а экземпляры могут быть использованы несколькими потоками одновременно.
// Недостатки:
//С одной стороны, потокобезопасность — преимущество класса, а другой — недостаток.
// Синхронизированные методы работают медленнее не сихнронизированных.
// И здесь в игру вступает StringBuilder. Давайте разберемся, что это за класс Java — StringBuilder,
// какие методы есть и в чем его особенности.
// Разница лишь в том, что StringBuffer потокобезопасен, и все его методы синхронизированы,
// а StringBuilder — нет. Это единственная особенность.
// StringBuilder в Java работает быстрее StringBuffer’а благодаря несинхронизированности методов.
// Поэтому в большинстве случаев, кроме многопоточной среды, лучше использовать для программы на Java StringBuilder.
// Резюмируем все в сравнительной таблице трех классов:
    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer();
        sb.append(Integer.valueOf(2));
        sb.append("; ");
        sb.append(false);
        sb.append("; ");
        sb.append(Arrays.asList(1,2,3));
        sb.append("; ");

        System.out.println(sb); // 2; false; [1, 2, 3];
    }
}
