package com.tasks.AlgorithmsDataStructures;

// 1) Наиболее примитивный алгоритм поиска – линейный поиск
// Разобрать АЛГОРИТМ, РАСПИСАТЬ - Прогнать по stacktrace - посмортеть как ходит и что ХОДИТ!
//Алгоритмы поиска
//Для базового изучения алгоритмов крайне подходит такая структура данных, как массив.
//Массив – структура данных в виде набора компонентов (элементов массива),
// расположенных в памяти непосредственно друг за другом, что позволяет обращаться к элементам по числовому индексу.
//Наиболее примитивный алгоритм поиска – линейный поиск (псевдокод которого мы рассмативали выше).

public class LinearSearch {

    public static void main(String[] args) {
        int[] integerArray = {800, 345, 977, 40, 12, -183, 234, 15};//Исходные значения
        int elementToFind = 234;//Цифра поиска
        System.out.println("Element " + elementToFind + " found, index: " + linerSearch(integerArray, elementToFind));
    }

    private static int linerSearch(int[] integerArray, int key){//Берет параметры int массив исходных значений, int key
        int arraySize = integerArray.length;//В int arraySize ложим исходные значения присваиваем свойство length-возвращает длину строки

        for (int i = 0; i < arraySize; i++){//для i=0; то i меньше < Исходные значения; i плюс 1, прибавляет значение массива [0,1,2 и т.д.]
            if (integerArray[i] == key){//Если (Сравнивает Исходные значения [массивы полученные] с == key

                return i;//Вернуть конечное значение
            }
        }
        return -1;//Без разницы linerSearch он должен что то вернуть
        //Так как в массиве не может быть отрицательного индекса - это явно сигнализирует о том, что элемента с таким значения в массиве нет.
        //И без логирования и исключений мы это можем показать именно таким способом.
//В данном случае происходит следующее:
//В методе linearSearch мы принимаем массив и искомое значение
//Циклом начинаем перебирать элементы массива
//Сравниваем 234 и 800 – получаем false
//Сравниваем 234 и 345 – получаем false
//Сравниваем 234 и 977 – получаем false
//Сравниваем 234 и 40 – получаем false
//Сравниваем 234 и 12 – получаем false
//Сравниваем 234 и -183 – получаем false
//Сравниваем 234 и 234 – получаем true
//Возвращаем индекс элемента – 6
//Худший случай, когда искомого элемента нет в массиве – в этом случае – мы перебираем все элементы. Т.е. сложность линейная – O(n).
    }
}
